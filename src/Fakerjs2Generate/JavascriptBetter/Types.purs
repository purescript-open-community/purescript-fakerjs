module Fakerjs2Generate.JavascriptBetter.Types where

import Data.Array.NonEmpty (NonEmptyArray)
import Data.Either (Either)
import Data.Map (Map)
import Data.Maybe (Maybe)
import Data.String.NonEmpty (NonEmptyString)
import Fakerjs2Generate.Parser.ReplaceSymbolsPattern (ReplaceSymbolsPattern)

newtype Weighted a = Weighted { value :: a, weight :: Int }
type NameCodeSymbolNumericCode = { name :: NonEmptyString, code :: NonEmptyString, symbol :: String, numericCode :: NonEmptyString }
newtype ReplaceSymbols a = ReplaceSymbols a
newtype WithFunctionCall a = WithFunctionCall a

type DirsTo :: forall k. (Type -> k) -> Row k

type DirsTo f =
  ( "airline/airline" :: f (NonEmptyArray { name :: NonEmptyString, iataCode :: NonEmptyString })
  , "airline/airplane" :: f (NonEmptyArray { name :: NonEmptyString, iataTypeCode :: NonEmptyString })
  , "airline/airport" :: f (NonEmptyArray { name :: NonEmptyString, iataCode :: NonEmptyString })
  , "animal/bear" :: f (NonEmptyArray NonEmptyString)
  , "animal/bird" :: f (NonEmptyArray NonEmptyString)
  , "animal/cat" :: f (NonEmptyArray NonEmptyString)
  , "animal/cetacean" :: f (NonEmptyArray NonEmptyString)
  , "animal/cow" :: f (NonEmptyArray NonEmptyString)
  , "animal/crocodilia" :: f (NonEmptyArray NonEmptyString)
  , "animal/dog" :: f (NonEmptyArray NonEmptyString)
  , "animal/fish" :: f (NonEmptyArray NonEmptyString)
  , "animal/horse" :: f (NonEmptyArray NonEmptyString)
  , "animal/insect" :: f (NonEmptyArray NonEmptyString)
  , "animal/lion" :: f (NonEmptyArray NonEmptyString)
  , "animal/pet_name" :: f (NonEmptyArray NonEmptyString)
  , "animal/rabbit" :: f (NonEmptyArray NonEmptyString)
  , "animal/rodent" :: f (NonEmptyArray NonEmptyString)
  , "animal/snake" :: f (NonEmptyArray NonEmptyString)
  , "animal/type" :: f (NonEmptyArray NonEmptyString)
  , "app/author" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "app/name" :: f (NonEmptyArray NonEmptyString)
  , "app/version" :: f (NonEmptyArray NonEmptyString)
  , "book/author" :: f (NonEmptyArray NonEmptyString)
  , "book/format" :: f (NonEmptyArray NonEmptyString)
  , "book/genre" :: f (NonEmptyArray NonEmptyString)
  , "book/publisher" :: f (NonEmptyArray NonEmptyString)
  , "book/series" :: f (NonEmptyArray NonEmptyString)
  , "book/title" :: f (NonEmptyArray NonEmptyString)
  , "cell_phone/common_cell_prefix" :: f (NonEmptyArray Int)
  , "cell_phone/formats" :: f (NonEmptyArray (WithFunctionCall (ReplaceSymbols NonEmptyString)))
  , "color/human" :: f (NonEmptyArray NonEmptyString)
  , "color/space" :: f (NonEmptyArray NonEmptyString)
  , "commerce/department" :: f (NonEmptyArray NonEmptyString)
  , "commerce/product_description" :: f (NonEmptyArray NonEmptyString)
  , "commerce/product_name" :: f ({ adjective :: NonEmptyArray NonEmptyString, material :: NonEmptyArray NonEmptyString, product :: NonEmptyArray NonEmptyString })
  , "company/adjective" :: f (NonEmptyArray NonEmptyString)
  , "company/buzz_adjective" :: f (NonEmptyArray NonEmptyString)
  , "company/buzz_noun" :: f (NonEmptyArray NonEmptyString)
  , "company/buzz_verb" :: f (NonEmptyArray NonEmptyString)
  , "company/category" :: f (NonEmptyArray NonEmptyString)
  , "company/company_name" :: f (NonEmptyArray NonEmptyString)
  , "company/descriptor" :: f (NonEmptyArray NonEmptyString)
  , "company/legal_entity_type" :: f (NonEmptyArray NonEmptyString)
  , "company/name_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "company/noun" :: f (NonEmptyArray NonEmptyString)
  , "company/prefix" :: f (NonEmptyArray NonEmptyString)
  , "company/suffix" :: f (NonEmptyArray NonEmptyString)
  , "database/collation" :: f (NonEmptyArray NonEmptyString)
  , "database/column" :: f (NonEmptyArray NonEmptyString)
  , "database/engine" :: f (NonEmptyArray NonEmptyString)
  , "database/type" :: f (NonEmptyArray NonEmptyString)
  , "date/month" :: f ({ abbr :: Maybe (NonEmptyArray NonEmptyString), wide :: NonEmptyArray NonEmptyString, abbr_context :: Maybe (NonEmptyArray NonEmptyString), wide_context :: Maybe (NonEmptyArray NonEmptyString) })
  , "date/time_zone" :: f (NonEmptyArray NonEmptyString)
  , "date/weekday" :: f ({ abbr :: Maybe (NonEmptyArray NonEmptyString), wide :: NonEmptyArray NonEmptyString, abbr_context :: Maybe (NonEmptyArray NonEmptyString), wide_context :: Maybe (NonEmptyArray NonEmptyString) })
  , "finance/account_type" :: f (NonEmptyArray NonEmptyString)
  , "finance/credit_card/american_express" :: f (NonEmptyArray NonEmptyString)
  , "finance/credit_card/diners_club" :: f (NonEmptyArray NonEmptyString)
  , "finance/credit_card/discover" :: f (NonEmptyArray NonEmptyString)
  , "finance/credit_card/jcb" :: f (NonEmptyArray NonEmptyString)
  , "finance/credit_card/mastercard" :: f (NonEmptyArray NonEmptyString)
  , "finance/credit_card/unionpay" :: f (NonEmptyArray NonEmptyString)
  , "finance/credit_card/visa" :: f (NonEmptyArray NonEmptyString)
  , "finance/currency" :: f (NonEmptyArray { name :: NonEmptyString, code :: NonEmptyString, symbol :: String, numericCode :: NonEmptyString })
  , "finance/transaction_description_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "finance/transaction_type" :: f (NonEmptyArray NonEmptyString)
  , "food/adjective" :: f (NonEmptyArray NonEmptyString)
  , "food/description_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "food/dish" :: f (NonEmptyArray NonEmptyString)
  , "food/dish_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "food/ethnic_category" :: f (NonEmptyArray NonEmptyString)
  , "food/fruit" :: f (NonEmptyArray NonEmptyString)
  , "food/ingredient" :: f (NonEmptyArray NonEmptyString)
  , "food/meat" :: f (NonEmptyArray NonEmptyString)
  , "food/spice" :: f (NonEmptyArray NonEmptyString)
  , "food/vegetable" :: f (NonEmptyArray NonEmptyString)
  , "hacker/abbreviation" :: f (NonEmptyArray NonEmptyString)
  , "hacker/adjective" :: f (NonEmptyArray NonEmptyString)
  , "hacker/ingverb" :: f (NonEmptyArray NonEmptyString)
  , "hacker/noun" :: f (NonEmptyArray NonEmptyString)
  , "hacker/phrase" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "hacker/verb" :: f (NonEmptyArray NonEmptyString)
  , "internet/domain_suffix" :: f (NonEmptyArray NonEmptyString)
  , "internet/emoji" :: f { smiley :: NonEmptyArray NonEmptyString, body :: NonEmptyArray NonEmptyString, person :: NonEmptyArray NonEmptyString, nature :: NonEmptyArray NonEmptyString, food :: NonEmptyArray NonEmptyString, travel :: NonEmptyArray NonEmptyString, activity :: NonEmptyArray NonEmptyString, object :: NonEmptyArray NonEmptyString, symbol :: NonEmptyArray NonEmptyString, flag :: NonEmptyArray NonEmptyString }
  , "internet/example_email" :: f (NonEmptyArray NonEmptyString)
  , "internet/free_email" :: f (NonEmptyArray NonEmptyString)
  , "internet/http_status_code" :: f { informational :: NonEmptyArray Int, success :: NonEmptyArray Int, redirection :: NonEmptyArray Int, clientError :: NonEmptyArray Int, serverError :: NonEmptyArray Int }
  , "internet/jwt_algorithm" :: f (NonEmptyArray NonEmptyString)
  , "internet/user_agent_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "location/building_number" :: f (NonEmptyArray ReplaceSymbolsPattern)
  , "location/city_infix" :: f (NonEmptyArray NonEmptyString)
  , "location/city_name" :: f (NonEmptyArray NonEmptyString)
  , "location/city_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "location/city_prefix" :: f (Maybe (NonEmptyArray NonEmptyString))
  , "location/city_suffix" :: f (Maybe (NonEmptyArray String))
  , "location/common_street_suffix" :: f (NonEmptyArray NonEmptyString)
  , "location/continent" :: f (NonEmptyArray NonEmptyString)
  , "location/country" :: f (NonEmptyArray NonEmptyString)
  , "location/country_code" :: f (NonEmptyArray { alpha2 :: NonEmptyString, alpha3 :: NonEmptyString, numeric :: NonEmptyString })
  , "location/county" :: f (NonEmptyArray NonEmptyString)
  , "location/direction" :: f { cardinal :: NonEmptyArray NonEmptyString, cardinal_abbr :: NonEmptyArray NonEmptyString, ordinal :: NonEmptyArray NonEmptyString, ordinal_abbr :: NonEmptyArray NonEmptyString }
  , "location/language" :: f (NonEmptyArray { name :: NonEmptyString, alpha2 :: NonEmptyString, alpha3 :: NonEmptyString })
  , "location/postcode" :: f (Maybe (NonEmptyArray ReplaceSymbolsPattern))
  , "location/postcode_by_state" :: f (Maybe (Map NonEmptyString (Either (WithFunctionCall NonEmptyString) (NonEmptyArray (WithFunctionCall NonEmptyString)))))
  , "location/secondary_address" :: f (NonEmptyArray (WithFunctionCall (ReplaceSymbols NonEmptyString)))
  , "location/state" :: f (Maybe (NonEmptyArray String))
  , "location/state_abbr" :: f (Maybe (NonEmptyArray NonEmptyString))
  , "location/street_address" :: f { normal :: WithFunctionCall NonEmptyString, full :: WithFunctionCall NonEmptyString }
  , "location/street_cantonese_part" :: f (NonEmptyArray NonEmptyString)
  , "location/street_english_part" :: f (NonEmptyArray NonEmptyString)
  , "location/street_name" :: f (NonEmptyArray NonEmptyString)
  , "location/street_name_part" :: f (NonEmptyArray NonEmptyString)
  , "location/street_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "location/street_prefix" :: f (Maybe (NonEmptyArray NonEmptyString))
  , "location/street_suffix" :: f (NonEmptyArray NonEmptyString)
  , "location/time_zone" :: f (NonEmptyArray (Maybe NonEmptyString))
  , "lorem/word" :: f (NonEmptyArray String)
  , "music/album" :: f (NonEmptyArray NonEmptyString)
  , "music/artist" :: f (NonEmptyArray NonEmptyString)
  , "music/genre" :: f (NonEmptyArray NonEmptyString)
  , "music/song_name" :: f (NonEmptyArray NonEmptyString)
  , "person/bio_part" :: f (NonEmptyArray NonEmptyString)
  , "person/bio_parts" :: f (NonEmptyArray NonEmptyString)
  , "person/bio_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "person/bio_supporter" :: f (NonEmptyArray NonEmptyString)
  , "person/female_title" :: f (NonEmptyArray NonEmptyString)
  , "person/first_name" :: f { generic :: Maybe (NonEmptyArray NonEmptyString), female :: Maybe (NonEmptyArray NonEmptyString), male :: Maybe (NonEmptyArray NonEmptyString) }
  , "person/gender" :: f (NonEmptyArray NonEmptyString)
  , "person/job_area" :: f (NonEmptyArray NonEmptyString)
  , "person/job_descriptor" :: f (NonEmptyArray NonEmptyString)
  , "person/job_title" :: f (NonEmptyArray NonEmptyString)
  , "person/job_title_pattern" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "person/job_type" :: f (NonEmptyArray NonEmptyString)
  , "person/last_name" :: f { generic :: Maybe (NonEmptyArray NonEmptyString), female :: Maybe (NonEmptyArray NonEmptyString), male :: Maybe (NonEmptyArray NonEmptyString) }
  , "person/last_name_pattern" :: f ({ generic :: Maybe (NonEmptyArray (Weighted (WithFunctionCall NonEmptyString))), female :: Maybe (NonEmptyArray (Weighted (WithFunctionCall NonEmptyString))), male :: Maybe (NonEmptyArray (Weighted (WithFunctionCall NonEmptyString))) })
  , "person/male_title" :: f (NonEmptyArray NonEmptyString)
  , "person/middle_name" :: f { generic :: Maybe (NonEmptyArray NonEmptyString), female :: Maybe (NonEmptyArray NonEmptyString), male :: Maybe (NonEmptyArray NonEmptyString) }
  , "person/name" :: f (NonEmptyArray (Weighted (WithFunctionCall NonEmptyString)))
  , "person/nobility_title_prefix" :: f (NonEmptyArray NonEmptyString)
  , "person/prefix" :: f (Maybe { generic :: Maybe (NonEmptyArray NonEmptyString), female :: Maybe (NonEmptyArray NonEmptyString), male :: Maybe (NonEmptyArray NonEmptyString) })
  , "person/sex" :: f (NonEmptyArray NonEmptyString)
  , "person/suffix" :: f (Maybe (NonEmptyArray NonEmptyString))
  , "person/western_zodiac_sign" :: f (NonEmptyArray NonEmptyString)
  , "phone_number/area_code" :: f (NonEmptyArray NonEmptyString)
  , "phone_number/exchange_code" :: f (NonEmptyArray NonEmptyString)
  , "phone_number/format/human" :: f (NonEmptyArray NonEmptyString)
  , "phone_number/format/international" :: f (NonEmptyArray NonEmptyString)
  , "phone_number/format/national" :: f (NonEmptyArray NonEmptyString)
  , "science/chemical_element" :: f (NonEmptyArray { symbol :: NonEmptyString, name :: NonEmptyString, atomicNumber :: Int })
  , "science/unit" :: f (NonEmptyArray { name :: NonEmptyString, symbol :: NonEmptyString })
  , "system/directory_path" :: f (NonEmptyArray NonEmptyString)
  , "system/mime_type" :: f (Map NonEmptyString { extensions :: NonEmptyArray NonEmptyString })
  , "team/creature" :: f (NonEmptyArray NonEmptyString)
  , "team/name" :: f (NonEmptyArray (WithFunctionCall NonEmptyString))
  , "team/prefix" :: f (NonEmptyArray NonEmptyString)
  , "team/suffix" :: f (NonEmptyArray NonEmptyString)
  , "vehicle/bicycle_type" :: f (NonEmptyArray NonEmptyString)
  , "vehicle/fuel" :: f (NonEmptyArray NonEmptyString)
  , "vehicle/manufacturer" :: f (NonEmptyArray NonEmptyString)
  , "vehicle/model" :: f (NonEmptyArray NonEmptyString)
  , "vehicle/type" :: f (NonEmptyArray NonEmptyString)
  , "word/adjective" :: f (NonEmptyArray NonEmptyString)
  , "word/adverb" :: f (NonEmptyArray NonEmptyString)
  , "word/conjunction" :: f (NonEmptyArray NonEmptyString)
  , "word/interjection" :: f (NonEmptyArray NonEmptyString)
  , "word/noun" :: f (NonEmptyArray NonEmptyString)
  , "word/preposition" :: f (NonEmptyArray NonEmptyString)
  , "word/verb" :: f (NonEmptyArray NonEmptyString)
  )
